//::///////////////////////////////////////////////
//:: Example Item Event Script
//:: x2_it_example
//:: Copyright (c) 2003 Bioware Corp.
//:://////////////////////////////////////////////
/*
    This is an example of how to use the
    new default module events for NWN to
    have all code concerning one item in
    a single file.

    Note that this system only works if
    the following scripts are set in your
    module events

    OnEquip      - x2_mod_def_equ
    OnUnEquip    - x2_mod_def_unequ
    OnAcquire    - x2_mod_def_aqu
    OnUnAcqucire - x2_mod_def_unaqu
    OnActivate   - x2_mod_def_act
*/
//:://////////////////////////////////////////////
//:: Created By: Georg Zoeller
//:: Created On: 2003-09-10
//:: Modified By: Grimlar
//:: Modified On: March 2004
//:://////////////////////////////////////////////

#include "x2_inc_switches"

void LateSignal()       {
                        object oNewFire;
                        SignalEvent(oNewFire,EventUserDefined(615882));
                        }

void aMakeFireAtLocation(object oPC,location lTarget){
                        CreateObject(OBJECT_TYPE_PLACEABLE,"firebld_cmpfr",lTarget,TRUE,"fb_cmpfr");
                        object oNewFire = GetNearestObjectByTag("fb_cmpfr",oPC,1);
                        int nFireLifeM = GetTimeMinute();
                        int nFireLifeH = GetTimeHour();
                        int nFireLifeS = GetTimeSecond();
                        SetLocalInt(oNewFire,"nBornS",nFireLifeS);
                        SetLocalInt(oNewFire,"nBornM",nFireLifeM);
                        SetLocalInt(oNewFire,"nBornH",nFireLifeH);
                        SetLocalInt(oNewFire,"nFuel",1);
                        SignalEvent(oNewFire,EventUserDefined(615881));
                        }

void main()
{
    int    nEvent = GetUserDefinedItemEventNumber(); // Which event triggered this
    object oArea;
    object oPC;                                      // The player character using the item
    object oItem;                                    // The item being used
    object oSpellOrigin;                             // The origin of the spell
    object oSpellTarget;                             // The target of the spell
    int    iSpell;                                   // The Spell ID number
    location lTarget;                                // Unique Power item target location
    location lPC;                                    // Player Character location
    float fPCtargetDeltaX;                           // Difference between item target and player on X vector
    float fPCtargetDeltaY;                           // Difference between item target and player on Y vector
    vector vPC;                                      // Player character location vector
    vector vTarget;                                  // Unique Power item target location vector
    float foPCFacing;                                // Which way the player character faces.
    float fTowardPC;                                 // Face toward the player character.
    string sDeltaX;                                  // X Delta Float as String (For Debug)
    string sDeltaY;                                  // Y Delta Float as String (For Debug)
    float fXYDeltaHypotenuse;                        // Sqrt of DeltaX^2+DeltaY^2
    float fDeltaWalkDelay;                           // Constant to Multiply based on Hypotenuse
    location lCreateObject;


    // Set the return value for the item event script
    // * X2_EXECUTE_SCRIPT_CONTINUE - continue calling script after executed script is done
    // * X2_EXECUTE_SCRIPT_END - end calling script after executed script is done
    int nResult = X2_EXECUTE_SCRIPT_END;

    switch (nEvent)
    {
        case X2_ITEM_EVENT_ONHITCAST:
            // * This code runs when the item has the 'OnHitCastSpell: Unique power' property
            // * and it hits a target (if it's a weapon) or is being hit (if it's a piece of armor)
            // * Note that this event fires for non PC creatures as well.

            oItem        =  GetSpellCastItem();     // The item triggering this spellscript
            oPC          = OBJECT_SELF;             // The player triggering it
            oSpellOrigin = OBJECT_SELF ;            // Where the spell came from
            oSpellTarget = GetSpellTargetObject();  // What the spell is aimed at

            // Your code goes here
            break;

// ACTIVATE ITEM CASE
        case X2_ITEM_EVENT_ACTIVATE:

            oPC   = GetItemActivator();
            oItem = GetItemActivated();
            lTarget = GetItemActivatedTargetLocation();
            oArea = GetAreaFromLocation(lTarget);
            lPC = GetLocation(GetItemActivator());
            vPC = GetPosition(oPC);
            vTarget = GetPositionFromLocation(lTarget);
            fPCtargetDeltaX = vPC.x-vTarget.x;
            fPCtargetDeltaY = vPC.y-vTarget.y;
            sDeltaX = FloatToString(fPCtargetDeltaX,5,5);
            sDeltaY = FloatToString(fPCtargetDeltaY,5,5);
            fXYDeltaHypotenuse = sqrt((fPCtargetDeltaX*fPCtargetDeltaX) + (fPCtargetDeltaY*fPCtargetDeltaY));
            fDeltaWalkDelay = fXYDeltaHypotenuse*0.2;

            SendMessageToPC(oPC,sDeltaX);
            SendMessageToPC(oPC,sDeltaY);

            if(fPCtargetDeltaX>2.0||fPCtargetDeltaX<-2.0||fPCtargetDeltaY>2.0||fPCtargetDeltaY<-2.0){
                        SendMessageToPC (oPC,"Moving to place a campfire at that position.");
                        AssignCommand(oPC,ActionMoveToLocation(lTarget,TRUE));
                        AssignCommand(oPC,ActionPlayAnimation(12,2.0,2.0));
                        DelayCommand(2.5 + fDeltaWalkDelay,AssignCommand(oPC,aMakeFireAtLocation(oPC,lTarget)));
                    }

            else    {
                        AssignCommand(oPC,ActionPlayAnimation(12,2.0,2.0));
                        DelayCommand(2.0,AssignCommand(oPC,aMakeFireAtLocation(oPC,lTarget)));
                    }



            break;

// EQUIP
        case X2_ITEM_EVENT_EQUIP:
            // * This code runs when the item is equipped
            // * Note that this event fires for PCs only

            oPC   = GetPCItemLastEquippedBy();      // The player who equipped the item
            oItem = GetPCItemLastEquipped();        // The item that was equipped

            // Your code goes here
            break;

        case X2_ITEM_EVENT_UNEQUIP:
            // * This code runs when the item is unequipped
            // * Note that this event fires for PCs only

            oPC    = GetPCItemLastUnequippedBy();   // The player who unequipped the item
            oItem  = GetPCItemLastUnequipped();     // The item that was unequipped

            // Your code goes here
            break;

        case X2_ITEM_EVENT_ACQUIRE:
            // * This code runs when the item is acquired
            // * Note that this event fires for PCs only

            oPC    = GetModuleItemAcquiredBy();     // The player who acquired the item
            oItem  = GetModuleItemAcquired();       // The item that was acquired

            // Your code goes here
            break;

        case X2_ITEM_EVENT_UNACQUIRE:
            // * This code runs when the item is unacquired
            // * Note that this event fires for PCs only

            oPC    = GetModuleItemLostBy();         // The player who dropped the item
            oItem  = GetModuleItemLost();           // The item that was dropped

            // Your code goes here
            break;

        case X2_ITEM_EVENT_SPELLCAST_AT:
            //* This code runs when a PC or DM casts a spell from one of the
            //* standard spellbooks on the item

            oPC    = OBJECT_SELF;                   // The player who cast the spell
            oItem  = GetSpellTargetObject();        // The item targeted by the spell
            iSpell = GetSpellId();                  // The id of the spell that was cast
                                                    // See the list of SPELL_* constants

            // Your code goes here

            // Change the following line from X2_EXECUTE_SCRIPT_CONTINUE to
            // X2_EXECUTE_SCRIPT_END if you want to prevent the spell that was
            // cast on the item from taking effect
            nResult = X2_EXECUTE_SCRIPT_CONTINUE;
            break;
    }

    // Pass the return value back to the calling script
    SetExecutedScriptReturnValue(nResult);
}
